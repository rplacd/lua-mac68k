***************
*** 47,53 ****
  ** (It will crash with a limit too high.)
  */
  #if !defined(LUAI_MAXCSTACK)
- #define LUAI_MAXCSTACK		2000
  #endif
  
  
--- 47,53 ----
  ** (It will crash with a limit too high.)
  */
  #if !defined(LUAI_MAXCSTACK)
+ #define LUAI_MAXCSTACK        200
  #endif
  
  
***************
*** 56,62 ****
  ** Define it if you want Lua to avoid the use of a few C99 features
  ** or Windows-specific features on Windows.
  */
- /* #define LUA_USE_C89 */
  
  
  /*
--- 56,62 ----
  ** Define it if you want Lua to avoid the use of a few C99 features
  ** or Windows-specific features on Windows.
  */
+ #define LUA_USE_C89
  
  
  /*
***************
*** 68,94 ****
  
  
  #if defined(LUA_USE_WINDOWS)
- #define LUA_DL_DLL	/* enable support for DLL */
- #define LUA_USE_C89	/* broadly, Windows is C89 */
  #endif
  
  
  #if defined(LUA_USE_LINUX)
  #define LUA_USE_POSIX
- #define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
  #endif
  
  
  #if defined(LUA_USE_MACOSX)
  #define LUA_USE_POSIX
- #define LUA_USE_DLOPEN		/* MacOS does not need -ldl */
  #endif
  
  
  /*
  @@ LUAI_IS32INT is true iff 'int' has (at least) 32 bits.
  */
- #define LUAI_IS32INT	((UINT_MAX >> 30) >= 3)
  
  /* }================================================================== */
  
--- 68,94 ----
  
  
  #if defined(LUA_USE_WINDOWS)
+ #define LUA_DL_DLL    /* enable support for DLL */
+ #define LUA_USE_C89    /* broadly, Windows is C89 */
  #endif
  
  
  #if defined(LUA_USE_LINUX)
  #define LUA_USE_POSIX
+ #define LUA_USE_DLOPEN        /* needs an extra library: -ldl */
  #endif
  
  
  #if defined(LUA_USE_MACOSX)
  #define LUA_USE_POSIX
+ #define LUA_USE_DLOPEN        /* MacOS does not need -ldl */
  #endif
  
  
  /*
  @@ LUAI_IS32INT is true iff 'int' has (at least) 32 bits.
  */
+ #define LUAI_IS32INT    ((UINT_MAX >> 30) >= 3)
  
  /* }================================================================== */
  
***************
*** 103,109 ****
  /*
  @@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats.
  */
- /* #define LUA_32BITS */
  
  
  /*
--- 103,109 ----
  /*
  @@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats.
  */
+ #define LUA_32BITS
  
  
  /*
***************
*** 127,171 ****
  */
  
  /* predefined options for LUA_INT_TYPE */
- #define LUA_INT_INT		1
- #define LUA_INT_LONG		2
- #define LUA_INT_LONGLONG	3
  
  /* predefined options for LUA_FLOAT_TYPE */
- #define LUA_FLOAT_FLOAT		1
- #define LUA_FLOAT_DOUBLE	2
- #define LUA_FLOAT_LONGDOUBLE	3
  
- #if defined(LUA_32BITS)		/* { */
  /*
  ** 32-bit integers and 'float'
  */
  #if LUAI_IS32INT  /* use 'int' if big enough */
- #define LUA_INT_TYPE	LUA_INT_INT
  #else  /* otherwise use 'long' */
- #define LUA_INT_TYPE	LUA_INT_LONG
  #endif
- #define LUA_FLOAT_TYPE	LUA_FLOAT_FLOAT
  
- #elif defined(LUA_C89_NUMBERS)	/* }{ */
  /*
  ** largest types available for C89 ('long' and 'double')
  */
- #define LUA_INT_TYPE	LUA_INT_LONG
- #define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
  
- #endif				/* } */
  
  
  /*
  ** default configuration for 64-bit Lua ('long long' and 'double')
  */
  #if !defined(LUA_INT_TYPE)
- #define LUA_INT_TYPE	LUA_INT_LONGLONG
  #endif
  
  #if !defined(LUA_FLOAT_TYPE)
- #define LUA_FLOAT_TYPE	LUA_FLOAT_DOUBLE
  #endif
  
  /* }================================================================== */
--- 127,171 ----
  */
  
  /* predefined options for LUA_INT_TYPE */
+ #define LUA_INT_INT        1
+ #define LUA_INT_LONG        2
+ #define LUA_INT_LONGLONG    3
  
  /* predefined options for LUA_FLOAT_TYPE */
+ #define LUA_FLOAT_FLOAT        1
+ #define LUA_FLOAT_DOUBLE    2
+ #define LUA_FLOAT_LONGDOUBLE    3
  
+ #if defined(LUA_32BITS)        /* { */
  /*
  ** 32-bit integers and 'float'
  */
  #if LUAI_IS32INT  /* use 'int' if big enough */
+ #define LUA_INT_TYPE    LUA_INT_INT
  #else  /* otherwise use 'long' */
+ #define LUA_INT_TYPE    LUA_INT_LONG
  #endif
+ #define LUA_FLOAT_TYPE    LUA_FLOAT_FLOAT
  
+ #elif defined(LUA_C89_NUMBERS)    /* }{ */
  /*
  ** largest types available for C89 ('long' and 'double')
  */
+ #define LUA_INT_TYPE    LUA_INT_LONG
+ #define LUA_FLOAT_TYPE    LUA_FLOAT_DOUBLE
  
+ #endif                /* } */
  
  
  /*
  ** default configuration for 64-bit Lua ('long long' and 'double')
  */
  #if !defined(LUA_INT_TYPE)
+ #define LUA_INT_TYPE    LUA_INT_LONGLONG
  #endif
  
  #if !defined(LUA_FLOAT_TYPE)
+ #define LUA_FLOAT_TYPE    LUA_FLOAT_DOUBLE
  #endif
  
  /* }================================================================== */
***************
*** 200,249 ****
  ** non-conventional directories.
  */
  
- #define LUA_VDIR	LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
- #if defined(_WIN32)	/* { */
  /*
  ** In Windows, any exclamation mark ('!') in the path is replaced by the
  ** path of the directory of the executable file of the current process.
  */
- #define LUA_LDIR	"!\\lua\\"
- #define LUA_CDIR	"!\\"
- #define LUA_SHRDIR	"!\\..\\share\\lua\\" LUA_VDIR "\\"
  
  #if !defined(LUA_PATH_DEFAULT)
  #define LUA_PATH_DEFAULT  \
- 		LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" \
- 		LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" \
- 		LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" \
- 		".\\?.lua;" ".\\?\\init.lua"
  #endif
  
  #if !defined(LUA_CPATH_DEFAULT)
  #define LUA_CPATH_DEFAULT \
- 		LUA_CDIR"?.dll;" \
- 		LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" \
- 		LUA_CDIR"loadall.dll;" ".\\?.dll"
  #endif
  
- #else			/* }{ */
  
- #define LUA_ROOT	"/usr/local/"
- #define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
- #define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
  
  #if !defined(LUA_PATH_DEFAULT)
  #define LUA_PATH_DEFAULT  \
- 		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" \
- 		LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" \
- 		"./?.lua;" "./?/init.lua"
  #endif
  
  #if !defined(LUA_CPATH_DEFAULT)
  #define LUA_CPATH_DEFAULT \
- 		LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
  #endif
  
- #endif			/* } */
  
  
  /*
--- 200,249 ----
  ** non-conventional directories.
  */
  
+ #define LUA_VDIR    LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
+ #if defined(_WIN32)    /* { */
  /*
  ** In Windows, any exclamation mark ('!') in the path is replaced by the
  ** path of the directory of the executable file of the current process.
  */
+ #define LUA_LDIR    "!\\lua\\"
+ #define LUA_CDIR    "!\\"
+ #define LUA_SHRDIR    "!\\..\\share\\lua\\" LUA_VDIR "\\"
  
  #if !defined(LUA_PATH_DEFAULT)
  #define LUA_PATH_DEFAULT  \
+         LUA_LDIR"?.lua;"  LUA_LDIR"?\\init.lua;" \
+         LUA_CDIR"?.lua;"  LUA_CDIR"?\\init.lua;" \
+         LUA_SHRDIR"?.lua;" LUA_SHRDIR"?\\init.lua;" \
+         ".\\?.lua;" ".\\?\\init.lua"
  #endif
  
  #if !defined(LUA_CPATH_DEFAULT)
  #define LUA_CPATH_DEFAULT \
+         LUA_CDIR"?.dll;" \
+         LUA_CDIR"..\\lib\\lua\\" LUA_VDIR "\\?.dll;" \
+         LUA_CDIR"loadall.dll;" ".\\?.dll"
  #endif
  
+ #else            /* }{ */
  
+ #define LUA_ROOT    "/usr/local/"
+ #define LUA_LDIR    LUA_ROOT "share/lua/" LUA_VDIR "/"
+ #define LUA_CDIR    LUA_ROOT "lib/lua/" LUA_VDIR "/"
  
  #if !defined(LUA_PATH_DEFAULT)
  #define LUA_PATH_DEFAULT  \
+         LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" \
+         LUA_CDIR"?.lua;"  LUA_CDIR"?/init.lua;" \
+         "./?.lua;" "./?/init.lua"
  #endif
  
  #if !defined(LUA_CPATH_DEFAULT)
  #define LUA_CPATH_DEFAULT \
+         LUA_CDIR"?.so;" LUA_CDIR"loadall.so;" "./?.so"
  #endif
  
+ #endif            /* } */
  
  
  /*
***************
*** 254,262 ****
  #if !defined(LUA_DIRSEP)
  
  #if defined(_WIN32)
- #define LUA_DIRSEP	"\\"
  #else
- #define LUA_DIRSEP	"/"
  #endif
  
  #endif
--- 254,262 ----
  #if !defined(LUA_DIRSEP)
  
  #if defined(_WIN32)
+ #define LUA_DIRSEP    "\\"
  #else
+ #define LUA_DIRSEP    ":"
  #endif
  
  #endif
***************
*** 279,304 ****
  ** the libraries, you may want to use the following definition (define
  ** LUA_BUILD_AS_DLL to get it).
  */
- #if defined(LUA_BUILD_AS_DLL)	/* { */
  
- #if defined(LUA_CORE) || defined(LUA_LIB)	/* { */
  #define LUA_API __declspec(dllexport)
- #else						/* }{ */
  #define LUA_API __declspec(dllimport)
- #endif						/* } */
  
- #else				/* }{ */
  
- #define LUA_API		extern
  
- #endif				/* } */
  
  
  /*
  ** More often than not the libs go together with the core.
  */
- #define LUALIB_API	LUA_API
- #define LUAMOD_API	LUA_API
  
  
  /*
--- 279,304 ----
  ** the libraries, you may want to use the following definition (define
  ** LUA_BUILD_AS_DLL to get it).
  */
+ #if defined(LUA_BUILD_AS_DLL)    /* { */
  
+ #if defined(LUA_CORE) || defined(LUA_LIB)    /* { */
  #define LUA_API __declspec(dllexport)
+ #else                        /* }{ */
  #define LUA_API __declspec(dllimport)
+ #endif                        /* } */
  
+ #else                /* }{ */
  
+ #define LUA_API        extern
  
+ #endif                /* } */
  
  
  /*
  ** More often than not the libs go together with the core.
  */
+ #define LUALIB_API    LUA_API
+ #define LUAMOD_API    LUA_API
  
  
  /*
***************
*** 316,329 ****
  ** default definition.
  */
  #if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
-     defined(__ELF__)		/* { */
- #define LUAI_FUNC	__attribute__((visibility("internal"))) extern
- #else				/* }{ */
- #define LUAI_FUNC	extern
- #endif				/* } */
  
- #define LUAI_DDEC(dec)	LUAI_FUNC dec
- #define LUAI_DDEF	/* empty */
  
  /* }================================================================== */
  
--- 316,329 ----
  ** default definition.
  */
  #if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
+     defined(__ELF__)        /* { */
+ #define LUAI_FUNC    __attribute__((visibility("internal"))) extern
+ #else                /* }{ */
+ #define LUAI_FUNC    extern
+ #endif                /* } */
  
+ #define LUAI_DDEC(dec)    LUAI_FUNC dec
+ #define LUAI_DDEF    /* empty */
  
  /* }================================================================== */
  
***************
*** 339,345 ****
  ** You can define it to get all options, or change specific options
  ** to fit your specific needs.
  */
- #if defined(LUA_COMPAT_5_3)	/* { */
  
  /*
  @@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
--- 339,345 ----
  ** You can define it to get all options, or change specific options
  ** to fit your specific needs.
  */
+ #if defined(LUA_COMPAT_5_3)    /* { */
  
  /*
  @@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
***************
*** 373,386 ****
  ** (Once more, these macros were officially removed in 5.3, but they are
  ** still available here.)
  */
- #define lua_strlen(L,i)		lua_rawlen(L, (i))
  
- #define lua_objlen(L,i)		lua_rawlen(L, (i))
  
- #define lua_equal(L,idx1,idx2)		lua_compare(L,(idx1),(idx2),LUA_OPEQ)
- #define lua_lessthan(L,idx1,idx2)	lua_compare(L,(idx1),(idx2),LUA_OPLT)
  
- #endif				/* } */
  
  /* }================================================================== */
  
--- 373,386 ----
  ** (Once more, these macros were officially removed in 5.3, but they are
  ** still available here.)
  */
+ #define lua_strlen(L,i)        lua_rawlen(L, (i))
  
+ #define lua_objlen(L,i)        lua_rawlen(L, (i))
  
+ #define lua_equal(L,idx1,idx2)        lua_compare(L,(idx1),(idx2),LUA_OPEQ)
+ #define lua_lessthan(L,idx1,idx2)    lua_compare(L,(idx1),(idx2),LUA_OPLT)
  
+ #endif                /* } */
  
  /* }================================================================== */
  
***************
*** 411,420 ****
  
  /* The following definitions are good for most cases here */
  
- #define l_floor(x)		(l_mathop(floor)(x))
  
  #define lua_number2str(s,sz,n)  \
- 	l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
  
  /*
  @@ lua_numbertointeger converts a float number with an integral value
--- 411,420 ----
  
  /* The following definitions are good for most cases here */
  
+ #define l_floor(x)        (l_mathop(floor)(x))
  
  #define lua_number2str(s,sz,n)  \
+     l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))
  
  /*
  @@ lua_numbertointeger converts a float number with an integral value
***************
*** 433,489 ****
  
  /* now the variable definitions */
  
- #if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT		/* { single float */
  
- #define LUA_NUMBER	float
  
- #define l_floatatt(n)		(FLT_##n)
  
- #define LUAI_UACNUMBER	double
  
- #define LUA_NUMBER_FRMLEN	""
- #define LUA_NUMBER_FMT		"%.7g"
  
- #define l_mathop(op)		op##f
  
- #define lua_str2number(s,p)	strtof((s), (p))
  
  
- #elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE	/* }{ long double */
  
- #define LUA_NUMBER	long double
  
- #define l_floatatt(n)		(LDBL_##n)
  
- #define LUAI_UACNUMBER	long double
  
- #define LUA_NUMBER_FRMLEN	"L"
- #define LUA_NUMBER_FMT		"%.19Lg"
  
- #define l_mathop(op)		op##l
  
- #define lua_str2number(s,p)	strtold((s), (p))
  
- #elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE	/* }{ double */
  
- #define LUA_NUMBER	double
  
- #define l_floatatt(n)		(DBL_##n)
  
- #define LUAI_UACNUMBER	double
  
- #define LUA_NUMBER_FRMLEN	""
- #define LUA_NUMBER_FMT		"%.14g"
  
- #define l_mathop(op)		op
  
- #define lua_str2number(s,p)	strtod((s), (p))
  
- #else						/* }{ */
  
  #error "numeric float type not defined"
  
- #endif					/* } */
  
  
  
--- 433,489 ----
  
  /* now the variable definitions */
  
+ #if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT        /* { single float */
  
+ #define LUA_NUMBER    float
  
+ #define l_floatatt(n)        (FLT_##n)
  
+ #define LUAI_UACNUMBER    double
  
+ #define LUA_NUMBER_FRMLEN    ""
+ #define LUA_NUMBER_FMT        "%.7g"
  
+ #define l_mathop(op)        op##f
  
+ #define lua_str2number(s,p)    strtof((s), (p))
  
  
+ #elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE    /* }{ long double */
  
+ #define LUA_NUMBER    long double
  
+ #define l_floatatt(n)        (LDBL_##n)
  
+ #define LUAI_UACNUMBER    long double
  
+ #define LUA_NUMBER_FRMLEN    "L"
+ #define LUA_NUMBER_FMT        "%.19Lg"
  
+ #define l_mathop(op)        op##l
  
+ #define lua_str2number(s,p)    strtold((s), (p))
  
+ #elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE    /* }{ double */
  
+ #define LUA_NUMBER    double
  
+ #define l_floatatt(n)        (DBL_##n)
  
+ #define LUAI_UACNUMBER    double
  
+ #define LUA_NUMBER_FRMLEN    ""
+ #define LUA_NUMBER_FMT        "%.14g"
  
+ #define l_mathop(op)        op
  
+ #define lua_str2number(s,p)    strtod((s), (p))
  
+ #else                        /* }{ */
  
  #error "numeric float type not defined"
  
+ #endif                    /* } */
  
  
  
***************
*** 506,587 ****
  
  /* The following definitions are good for most cases here */
  
- #define LUA_INTEGER_FMT		"%" LUA_INTEGER_FRMLEN "d"
  
- #define LUAI_UACINT		LUA_INTEGER
  
  #define lua_integer2str(s,sz,n)  \
- 	l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
  
  /*
  ** use LUAI_UACINT here to avoid problems with promotions (which
  ** can turn a comparison between unsigneds into a signed comparison)
  */
- #define LUA_UNSIGNED		unsigned LUAI_UACINT
  
  
- #define LUA_UNSIGNEDBITS	(sizeof(LUA_UNSIGNED) * CHAR_BIT)
  
  
  /* now the variable definitions */
  
- #if LUA_INT_TYPE == LUA_INT_INT		/* { int */
  
- #define LUA_INTEGER		int
- #define LUA_INTEGER_FRMLEN	""
  
- #define LUA_MAXINTEGER		INT_MAX
- #define LUA_MININTEGER		INT_MIN
  
- #define LUA_MAXUNSIGNED		UINT_MAX
  
- #elif LUA_INT_TYPE == LUA_INT_LONG	/* }{ long */
  
- #define LUA_INTEGER		long
- #define LUA_INTEGER_FRMLEN	"l"
  
- #define LUA_MAXINTEGER		LONG_MAX
- #define LUA_MININTEGER		LONG_MIN
  
- #define LUA_MAXUNSIGNED		ULONG_MAX
  
- #elif LUA_INT_TYPE == LUA_INT_LONGLONG	/* }{ long long */
  
  /* use presence of macro LLONG_MAX as proxy for C99 compliance */
- #if defined(LLONG_MAX)		/* { */
  /* use ISO C99 stuff */
  
- #define LUA_INTEGER		long long
- #define LUA_INTEGER_FRMLEN	"ll"
  
- #define LUA_MAXINTEGER		LLONG_MAX
- #define LUA_MININTEGER		LLONG_MIN
  
- #define LUA_MAXUNSIGNED		ULLONG_MAX
  
  #elif defined(LUA_USE_WINDOWS) /* }{ */
  /* in Windows, can use specific Windows types */
  
- #define LUA_INTEGER		__int64
- #define LUA_INTEGER_FRMLEN	"I64"
  
- #define LUA_MAXINTEGER		_I64_MAX
- #define LUA_MININTEGER		_I64_MIN
  
- #define LUA_MAXUNSIGNED		_UI64_MAX
  
- #else				/* }{ */
  
  #error "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
    or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
  
- #endif				/* } */
  
- #else				/* }{ */
  
  #error "numeric integer type not defined"
  
- #endif				/* } */
  
  /* }================================================================== */
  
--- 506,587 ----
  
  /* The following definitions are good for most cases here */
  
+ #define LUA_INTEGER_FMT        "%" LUA_INTEGER_FRMLEN "d"
  
+ #define LUAI_UACINT        LUA_INTEGER
  
  #define lua_integer2str(s,sz,n)  \
+     l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))
  
  /*
  ** use LUAI_UACINT here to avoid problems with promotions (which
  ** can turn a comparison between unsigneds into a signed comparison)
  */
+ #define LUA_UNSIGNED        unsigned LUAI_UACINT
  
  
+ #define LUA_UNSIGNEDBITS    (sizeof(LUA_UNSIGNED) * CHAR_BIT)
  
  
  /* now the variable definitions */
  
+ #if LUA_INT_TYPE == LUA_INT_INT        /* { int */
  
+ #define LUA_INTEGER        int
+ #define LUA_INTEGER_FRMLEN    ""
  
+ #define LUA_MAXINTEGER        INT_MAX
+ #define LUA_MININTEGER        INT_MIN
  
+ #define LUA_MAXUNSIGNED        UINT_MAX
  
+ #elif LUA_INT_TYPE == LUA_INT_LONG    /* }{ long */
  
+ #define LUA_INTEGER        long
+ #define LUA_INTEGER_FRMLEN    "l"
  
+ #define LUA_MAXINTEGER        LONG_MAX
+ #define LUA_MININTEGER        LONG_MIN
  
+ #define LUA_MAXUNSIGNED        ULONG_MAX
  
+ #elif LUA_INT_TYPE == LUA_INT_LONGLONG    /* }{ long long */
  
  /* use presence of macro LLONG_MAX as proxy for C99 compliance */
+ #if defined(LLONG_MAX)        /* { */
  /* use ISO C99 stuff */
  
+ #define LUA_INTEGER        long long
+ #define LUA_INTEGER_FRMLEN    "ll"
  
+ #define LUA_MAXINTEGER        LLONG_MAX
+ #define LUA_MININTEGER        LLONG_MIN
  
+ #define LUA_MAXUNSIGNED        ULLONG_MAX
  
  #elif defined(LUA_USE_WINDOWS) /* }{ */
  /* in Windows, can use specific Windows types */
  
+ #define LUA_INTEGER        __int64
+ #define LUA_INTEGER_FRMLEN    "I64"
  
+ #define LUA_MAXINTEGER        _I64_MAX
+ #define LUA_MININTEGER        _I64_MIN
  
+ #define LUA_MAXUNSIGNED        _UI64_MAX
  
+ #else                /* }{ */
  
  #error "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
    or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"
  
+ #endif                /* } */
  
+ #else                /* }{ */
  
  #error "numeric integer type not defined"
  
+ #endif                /* } */
  
  /* }================================================================== */
  
***************
*** 597,605 ****
  ** (All uses in Lua have only one format item.)
  */
  #if !defined(LUA_USE_C89)
- #define l_sprintf(s,sz,f,i)	snprintf(s,sz,f,i)
  #else
- #define l_sprintf(s,sz,f,i)	((void)(sz), sprintf(s,f,i))
  #endif
  
  
--- 597,605 ----
  ** (All uses in Lua have only one format item.)
  */
  #if !defined(LUA_USE_C89)
+ #define l_sprintf(s,sz,f,i)    snprintf(s,sz,f,i)
  #else
+ #define l_sprintf(s,sz,f,i)    ((void)(sz), sprintf(s,f,i))
  #endif
  
  
***************
*** 610,616 ****
  ** implementation.
  */
  #if !defined(LUA_USE_C89)
- #define lua_strx2number(s,p)		lua_str2number(s,p)
  #endif
  
  
--- 610,616 ----
  ** implementation.
  */
  #if !defined(LUA_USE_C89)
+ #define lua_strx2number(s,p)        lua_str2number(s,p)
  #endif
  
  
***************
*** 618,624 ****
  @@ lua_pointer2str converts a pointer to a readable string in a
  ** non-specified way.
  */
- #define lua_pointer2str(buff,sz,p)	l_sprintf(buff,sz,"%p",p)
  
  
  /*
--- 618,624 ----
  @@ lua_pointer2str converts a pointer to a readable string in a
  ** non-specified way.
  */
+ #define lua_pointer2str(buff,sz,p)    l_sprintf(buff,sz,"%p",p)
  
  
  /*
***************
*** 629,635 ****
  */
  #if !defined(LUA_USE_C89)
  #define lua_number2strx(L,b,sz,f,n)  \
- 	((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
  #endif
  
  
--- 629,635 ----
  */
  #if !defined(LUA_USE_C89)
  #define lua_number2strx(L,b,sz,f,n)  \
+     ((void)L, l_sprintf(b,sz,f,(LUAI_UACNUMBER)(n)))
  #endif
  
  
***************
*** 642,649 ****
  #if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
  #undef l_mathop  /* variants not available */
  #undef lua_str2number
- #define l_mathop(op)		(lua_Number)op  /* no variant */
- #define lua_str2number(s,p)	((lua_Number)strtod((s), (p)))
  #endif
  
  
--- 642,649 ----
  #if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
  #undef l_mathop  /* variants not available */
  #undef lua_str2number
+ #define l_mathop(op)        (lua_Number)op  /* no variant */
+ #define lua_str2number(s,p)    ((lua_Number)strtod((s), (p)))
  #endif
  
  
***************
*** 653,666 ****
  ** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
  ** 'intptr_t' in C89)
  */
- #define LUA_KCONTEXT	ptrdiff_t
  
  #if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
      __STDC_VERSION__ >= 199901L
  #include <stdint.h>
  #if defined(INTPTR_MAX)  /* even in C99 this type is optional */
  #undef LUA_KCONTEXT
- #define LUA_KCONTEXT	intptr_t
  #endif
  #endif
  
--- 653,666 ----
  ** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
  ** 'intptr_t' in C89)
  */
+ #define LUA_KCONTEXT    ptrdiff_t
  
  #if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
      __STDC_VERSION__ >= 199901L
  #include <stdint.h>
  #if defined(INTPTR_MAX)  /* even in C99 this type is optional */
  #undef LUA_KCONTEXT
+ #define LUA_KCONTEXT    intptr_t
  #endif
  #endif
  
***************
*** 671,677 ****
  ** macro must include the header 'locale.h'.)
  */
  #if !defined(lua_getlocaledecpoint)
- #define lua_getlocaledecpoint()		(localeconv()->decimal_point[0])
  #endif
  
  /* }================================================================== */
--- 671,677 ----
  ** macro must include the header 'locale.h'.)
  */
  #if !defined(lua_getlocaledecpoint)
+ #define lua_getlocaledecpoint()        (localeconv()->decimal_point[0])
  #endif
  
  /* }================================================================== */
***************
*** 699,705 ****
  */
  #if defined(LUA_USE_APICHECK)
  #include <assert.h>
- #define luai_apicheck(l,e)	assert(e)
  #endif
  
  /* }================================================================== */
--- 699,705 ----
  */
  #if defined(LUA_USE_APICHECK)
  #include <assert.h>
+ #define luai_apicheck(l,e)    assert(e)
  #endif
  
  /* }================================================================== */
***************
*** 721,729 ****
  ** (It must fit into max(size_t)/32.)
  */
  #if LUAI_IS32INT
- #define LUAI_MAXSTACK		1000000
  #else
- #define LUAI_MAXSTACK		15000
  #endif
  
  
--- 721,729 ----
  ** (It must fit into max(size_t)/32.)
  */
  #if LUAI_IS32INT
+ #define LUAI_MAXSTACK        1000000
  #else
+ #define LUAI_MAXSTACK        15000
  #endif
  
  
***************
*** 732,738 ****
  ** a Lua state with very fast access.
  ** CHANGE it if you need a different size.
  */
- #define LUA_EXTRASPACE		(sizeof(void *))
  
  
  /*
--- 732,738 ----
  ** a Lua state with very fast access.
  ** CHANGE it if you need a different size.
  */
+ #define LUA_EXTRASPACE        (sizeof(void *))
  
  
  /*
***************
*** 740,746 ****
  @@ of a function in debug information.
  ** CHANGE it if you want a different size.
  */
- #define LUA_IDSIZE	60
  
  
  /*
--- 740,746 ----
  @@ of a function in debug information.
  ** CHANGE it if you want a different size.
  */
+ #define LUA_IDSIZE    60
  
  
  /*
***************
*** 773,776 ****
  
  
  #endif
- 
--- 773,775 ----
  
  
  #endif
